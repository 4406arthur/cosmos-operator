package fullnode

import (
	"context"
	"fmt"

	victoriametricsv1beta1 "github.com/VictoriaMetrics/operator/api/v1beta1"
	cosmosv1 "github.com/strangelove-ventures/cosmos-operator/api/v1"
	"github.com/strangelove-ventures/cosmos-operator/internal/diff"
	"github.com/strangelove-ventures/cosmos-operator/internal/kube"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// VictoriametricsServiceControl creates or updates Services.
type VictoriametricsServiceControl struct {
	client Client
}

func NewVictoriametricsServiceControl(client Client) VictoriametricsServiceControl {
	return VictoriametricsServiceControl{
		client: client,
	}
}

// Reconcile creates or updates services.
// Some services, like P2P, reserve public addresses of which should not change.
// Therefore, services are never deleted unless the CRD itself is deleted.
func (vmc VictoriametricsServiceControl) Reconcile(ctx context.Context, log kube.Logger, crd *cosmosv1.CosmosFullNode) kube.ReconcileError {
	var vms victoriametricsv1beta1.VMServiceScrapeList
	if err := vmc.client.List(ctx, &vms,
		client.InNamespace(crd.Namespace),
		client.MatchingLabels{
			kube.ControllerLabel: "cosmos-operator",
			kube.NameLabel:       appName(crd),
		},
	); err != nil {
		return kube.TransientError(fmt.Errorf("list existing VMServiceScrape: %w", err))
	}

	current := ptrSlice(vms.Items)
	want := BuildVMServiceScrape(crd)
	diffed := diff.New(current, want)

	for _, vc := range diffed.Creates() {
		log.Debug("Creating VMServiceScrape", "VMServiceScrapeName", vc.Name)
		if err := ctrl.SetControllerReference(crd, vc, vmc.client.Scheme()); err != nil {
			return kube.TransientError(fmt.Errorf("set controller reference on VMServiceScrape %q: %w", vc.Name, err))
		}
		// Create the VMServiceScrape object
		if err := kube.Create(ctx, vmc.client, vc); err != nil {
			return kube.TransientError(fmt.Errorf("create VMServiceScrape %q: %w", vc.Name, err))
		}
	}

	// VMServiceScrape is a special case where we do not update the status field.
	// in our CRD we dont need to give the definition
	// auto generated by the operator

	for _, vc := range diffed.Updates() {
		log.Info("Updating VMServiceScrape", vc.Name)
		if err := vmc.client.Update(ctx, vc); err != nil {
			return kube.TransientError(fmt.Errorf("update VMServiceScrape %q: %w", vc.Name, err))
		}
	}

	return nil
}
